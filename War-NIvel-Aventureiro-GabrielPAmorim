#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Defini√ß√£o da estrutura Territorio
typedef struct {
    char nome[30];
    char cor[10]; // Cor (dono) do ex√©rcito: ex: "Azul", "Vermelho"
    int tropas;
} Territorio;

// Prot√≥tipos das fun√ß√µes
Territorio* alocarMapa(int *numTerritorios);
void cadastrarTerritorios(Territorio* mapa, int numTerritorios);
void exibirTerritorios(const Territorio* mapa, int numTerritorios);
void atacar(Territorio* atacante, Territorio* defensor);
void liberarMemoria(Territorio* mapa);
int rolarDado();
int buscarTerritorio(const Territorio* mapa, int numTerritorios, const char* nome);

// --- Fun√ß√£o Principal ---
int main() {
    // Inicializa o gerador de n√∫meros aleat√≥rios para a simula√ß√£o de dados
    srand(time(NULL));

    Territorio* mapa = NULL;
    int numTerritorios = 0;
    int escolhaAtacante, escolhaDefensor;
    char nomeAtacante[30], nomeDefensor[30];

    printf("üó∫Ô∏è --- Simulador de WAR Estruturado (Ataque) ---\n");

    // 1. Aloca√ß√£o Din√¢mica de Territ√≥rios
    mapa = alocarMapa(&numTerritorios);
    if (mapa == NULL) {
        return 1; // Encerra se a aloca√ß√£o falhar
    }

    // 2. Cadastro dos Territ√≥rios
    cadastrarTerritorios(mapa, numTerritorios);

    // Loop de simula√ß√£o de ataques
    char continuar = 's';
    while (continuar == 's' || continuar == 'S') {
        printf("\n--- Estado Atual do Mapa ---\n");
        exibirTerritorios(mapa, numTerritorios);

        // 3. Sele√ß√£o e Valida√ß√£o do Ataque
        printf("\nüî• Preparando para o Ataque...\n");

        // Sele√ß√£o do Territ√≥rio Atacante
        do {
            printf("Digite o NOME do territ√≥rio ATACANTE: ");
            if (scanf("%29s", nomeAtacante) != 1) continue; // Garante leitura
            escolhaAtacante = buscarTerritorio(mapa, numTerritorios, nomeAtacante);

            if (escolhaAtacante == -1) {
                printf("‚ùå Territ√≥rio atacante n√£o encontrado. Tente novamente.\n");
            } else if (mapa[escolhaAtacante].tropas < 2) {
                printf("‚ùå O atacante precisa de no m√≠nimo 2 tropas para atacar. Tropas atuais: %d. Tente outro.\n", mapa[escolhaAtacante].tropas);
                escolhaAtacante = -1; // For√ßa nova tentativa
            }
        } while (escolhaAtacante == -1);

        // Sele√ß√£o do Territ√≥rio Defensor
        do {
            printf("Digite o NOME do territ√≥rio DEFENSOR: ");
            if (scanf("%29s", nomeDefensor) != 1) continue; // Garante leitura
            escolhaDefensor = buscarTerritorio(mapa, numTerritorios, nomeDefensor);

            if (escolhaDefensor == -1) {
                printf("‚ùå Territ√≥rio defensor n√£o encontrado. Tente novamente.\n");
            } else if (escolhaDefensor == escolhaAtacante) {
                printf("‚ùå O territ√≥rio defensor n√£o pode ser o mesmo que o atacante. Tente outro.\n");
                escolhaDefensor = -1;
            } else if (strcmp(mapa[escolhaAtacante].cor, mapa[escolhaDefensor].cor) == 0) {
                // Requisito: Validar para que o jogador n√£o ataque um territ√≥rio da pr√≥pria cor.
                printf("‚ùå Voc√™ n√£o pode atacar um territ√≥rio da sua pr√≥pria cor (%s). Tente outro.\n", mapa[escolhaAtacante].cor);
                escolhaDefensor = -1; // For√ßa nova tentativa
            }
        } while (escolhaDefensor == -1);

        // 4. Simula√ß√£o do Ataque
        printf("\n‚öîÔ∏è SIMULANDO: %s (%s) ataca %s (%s)!\n", 
               mapa[escolhaAtacante].nome, mapa[escolhaAtacante].cor, 
               mapa[escolhaDefensor].nome, mapa[escolhaDefensor].cor);
        
        // Chamada da fun√ß√£o de ataque, usando ponteiros para os structs
        atacar(&mapa[escolhaAtacante], &mapa[escolhaDefensor]);

        // 5. Exibi√ß√£o P√≥s-ataque
        printf("\n--- Resultado do Ataque ---\n");
        printf("Atacante: %s | Cor: %s | Tropas: %d\n", 
               mapa[escolhaAtacante].nome, mapa[escolhaAtacante].cor, mapa[escolhaAtacante].tropas);
        printf("Defensor: %s | Cor: %s | Tropas: %d\n", 
               mapa[escolhaDefensor].nome, mapa[escolhaDefensor].cor, mapa[escolhaDefensor].tropas);
        printf("---------------------------\n");


        printf("\nDeseja realizar outro ataque? (s/n): ");
        scanf(" %c", &continuar);
        // Limpa o buffer de entrada para evitar problemas no pr√≥ximo loop
        while(getchar() != '\n');
    }

    // 6. Libera√ß√£o de Mem√≥ria
    liberarMemoria(mapa);
    printf("\n‚úÖ Mem√≥ria liberada com sucesso. Fim do programa.\n");
    
    return 0;
}

// --- Fun√ß√µes de Implementa√ß√£o ---

/**
 * @brief Aloca mem√≥ria dinamicamente para o vetor de Territorios.
 * @param numTerritorios Ponteiro para armazenar o n√∫mero total de territ√≥rios.
 * @return Ponteiro para o primeiro elemento do vetor alocado, ou NULL em caso de falha.
 */
Territorio* alocarMapa(int *numTerritorios) {
    printf("Informe o n√∫mero total de territ√≥rios para o mapa: ");
    if (scanf("%d", numTerritorios) != 1 || *numTerritorios <= 0) {
